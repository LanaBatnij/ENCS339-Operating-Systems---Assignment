#include <stdio.h>
#include <stdlib.h>
#include <unistd.h> // for pipe(), fork()

#define BUFFER_SIZE 25

int main() {
    int fd[2];
    pid_t pid;
    char buffer[BUFFER_SIZE];

    // create the pipe
    if (pipe(fd) == -1) {
        fprintf(stderr, "Pipe failed\n");
        return 1;
    }

    // fork a child process
    pid = fork();

    if (pid < 0) {
        fprintf(stderr, "Fork failed\n");
        return 1;
    }
    else if (pid == 0) { // child process
        close(fd[1]); // close the write end of the pipe

        // read from the pipe
        read(fd[0], buffer, BUFFER_SIZE);
        printf("Child process received: %s", buffer);

        close(fd[0]); // close the read end of the pipe
    }
    else { // parent process
        close(fd[0]); // close the read end of the pipe

        // write to the pipe
        printf("Enter a message: ");
        fgets(buffer, BUFFER_SIZE, stdin);
        write(fd[1], buffer, BUFFER_SIZE);

        close(fd[1]); // close the write end of the pipe
    }

    return 0;
}
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ this is pipe to pipe

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>

int main() {
    int fd;
    char *myfifo = "myfifo"; // path to the named pipe

    mkfifo(myfifo, 0666); // create the named pipe

    char buffer[100];
    strcpy(buffer, "Hello from process 1!");

    fd = open(myfifo, O_WRONLY); // open the named pipe for writing
    write(fd, buffer, strlen(buffer)+1); // write to the named pipe
    close(fd); // close the named pipe

    unlink(myfifo); // remove the named pipe from the file system

    return 0;
}

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ proccess 1
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>

int main() {
    int fd;
    char *myfifo = "myfifo"; // path to the named pipe

    mkfifo(myfifo, 0666); // create the named pipe

    char buffer[100];

    fd = open(myfifo, O_RDONLY); // open the named pipe for reading
    read(fd, buffer, sizeof(buffer)); // read from the named pipe
    printf("Received message: %s\n", buffer);
    close(fd); // close the named pipe

    unlink(myfifo); // remove the named pipe from the file system

    return 0;
}
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++= proccess 2

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/ipc.h>
#include <sys/shm.h>

#define BUFFER_SIZE 5

typedef struct {
    int buffer[BUFFER_SIZE];
    int in;    // Index where the producer will insert the next item
    int out;   // Index where the consumer will remove the next item
} CircularBuffer;

void producer(int* buffer, int* in) {
    int item = 1;
    
    while (1) {
        // Wait until there is space in the buffer
        while (((*in + 1) % BUFFER_SIZE) == *buffer);
        
        // Add item to the buffer
        buffer[*in] = item;
        printf("Producer: Inserted item %d\n", item);
        
        // Move the index to the next position
        *in = (*in + 1) % BUFFER_SIZE;
        item++;
        
        sleep(1);
    }
}

void consumer(int* buffer, int* out) {
    int item;
    
    while (1) {
        // Wait until there is an item in the buffer
        while (*out == *buffer);
        
        // Remove item from the buffer
        item = buffer[*out];
        printf("Consumer: Removed item %d\n", item);
        
        // Move the index to the next position
        *out = (*out + 1) % BUFFER_SIZE;
        
        sleep(1);
    }
}

int main() {
    int shmid;
    CircularBuffer* sharedBuffer;
    int* in;
    int* out;
    
    // Create shared memory segment
    shmid = shmget(IPC_PRIVATE, sizeof(CircularBuffer), IPC_CREAT | 0666);
    if (shmid == -1) {
        perror("shmget");
        exit(1);
    }
    
    // Attach shared memory segment
    sharedBuffer = (CircularBuffer*) shmat(shmid, NULL, 0);
    if (sharedBuffer == (CircularBuffer*) -1) {
        perror("shmat");
        exit(1);
    }
    
    // Initialize buffer indices
    in = &(sharedBuffer->in);
    out = &(sharedBuffer->out);
    *in = 0;
    *out = 0;
    
    // Fork a child process for the producer
    pid_t producerPid = fork();
    if (producerPid == 0) {
        producer(sharedBuffer->buffer, in);
        exit(0);
    }
    
    // Fork another child process for the consumer
    pid_t consumerPid = fork();
    if (consumerPid == 0) {
        consumer(sharedBuffer->buffer, out);
        exit(0);
    }
    
    // Wait for the child processes to complete
    waitpid(producerPid, NULL, 0);
    waitpid(consumerPid, NULL, 0);
    
    // Detach and remove shared memory segment
    shmdt(sharedBuffer);
    shmctl(shmid, IPC_RMID, NULL);
    
    return 0;
}
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ chat gpt solution




